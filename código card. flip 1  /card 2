using UnityEngine;
using System.Collections; // Necessário para usar as Coroutines

public class CardFlip : MonoBehaviour
{
    // Variável para controlar a duração da animação (em segundos)
    public float flipDuration = 0.35f;

    // Variável para evitar que a animação seja interrompida por cliques repetidos
    private bool isAnimating = false;

    void Update()
    {
        // 1. Verifica se a Barra de Espaço (KeyCode.Space) foi pressionada
        // 2. Garante que a carta não está no meio de outra animação
        if (Input.GetKeyDown(KeyCode.Space) && !isAnimating)
        {
            // Inicia a função de animação
            StartCoroutine(FlipAnimation());
        }
    }

    private IEnumerator FlipAnimation()
    {
        isAnimating = true; // Bloqueia novos flips

        // Define as rotações de início e fim da animação
        Quaternion startRotation = transform.rotation;

        // A rotação final será a rotação atual + 180 graus no eixo Y.
        // Isso garante que a carta sempre vire, não importa a posição inicial.
        Quaternion endRotation = startRotation * Quaternion.Euler(180, 360f, 0);

        float elapsedTime = 0f;

        // Loop de animação: roda a cada frame
        while (elapsedTime < flipDuration)
        {
            // Interpolação de Rotação Suave (Slerp)
            // Move a rotação gradualmente do início para o fim
            transform.rotation = Quaternion.Slerp(
                startRotation,
                endRotation,
                elapsedTime / flipDuration // O fator de 0 a 1 (progresso)
            );

            elapsedTime += Time.deltaTime; // Incrementa o tempo

            yield return null; // Pausa e continua no próximo frame
        }

        // Garante que a rotação finalize exatamente no ângulo de 180/360 graus.
        transform.rotation = endRotation;

        isAnimating = false; // Desbloqueia a carta para um novo flip
    }
}
